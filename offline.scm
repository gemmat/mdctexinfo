(use srfi-1)
(use srfi-13)
(use file.util)
(use rfc.uri)
(use gauche.parseopt)
(use gauche.charconv)
(use sxml.sxpath)
(use sxml.ssax)
(use sxml.tools)
(use sxml.serializer)

(load "./common.scm")

(define xhtml-entity
  '((nbsp . "\u00a0")
    (iexcl . "\u00a1")
    (cent . "\u00a2")
    (pound . "\u00a3")
    (curren . "\u00a4")
    (yen . "\u00a5")
    (brvbar . "\u00a6")
    (sect . "\u00a7")
    (uml . "\u00a8")
    (copy . "\u00a9")
    (ordf . "\u00aa")
    (laquo . "\u00ab")
    (not . "\u00ac")
    (shy . "\u00ad")
    (reg . "\u00ae")
    (macr . "\u00af")
    (deg . "\u00b0")
    (plusmn . "\u00b1")
    (sup2 . "\u00b2")
    (sup3 . "\u00b3")
    (acute . "\u00b4")
    (micro . "\u00b5")
    (para . "\u00b6")
    (middot . "\u00b7")
    (cedil . "\u00b8")
    (sup1 . "\u00b9")
    (ordm . "\u00ba")
    (raquo . "\u00bb")
    (frac14 . "\u00bc")
    (frac12 . "\u00bd")
    (frac34 . "\u00be")
    (iquest . "\u00bf")
    (Agrave . "\u00c0")
    (Aacute . "\u00c1")
    (Acirc . "\u00c2")
    (Atilde . "\u00c3")
    (Auml . "\u00c4")
    (Aring . "\u00c5")
    (AElig . "\u00c6")
    (Ccedil . "\u00c7")
    (Egrave . "\u00c8")
    (Eacute . "\u00c9")
    (Ecirc . "\u00ca")
    (Euml . "\u00cb")
    (Igrave . "\u00cc")
    (Iacute . "\u00cd")
    (Icirc . "\u00ce")
    (Iuml . "\u00cf")
    (ETH . "\u00d0")
    (Ntilde . "\u00d1")
    (Ograve . "\u00d2")
    (Oacute . "\u00d3")
    (Ocirc . "\u00d4")
    (Otilde . "\u00d5")
    (Ouml . "\u00d6")
    (times . "\u00d7")
    (Oslash . "\u00d8")
    (Ugrave . "\u00d9")
    (Uacute . "\u00da")
    (Ucirc . "\u00db")
    (Uuml . "\u00dc")
    (Yacute . "\u00dd")
    (THORN . "\u00de")
    (szlig . "\u00df")
    (agrave . "\u00e0")
    (aacute . "\u00e1")
    (acirc . "\u00e2")
    (atilde . "\u00e3")
    (auml . "\u00e4")
    (aring . "\u00e5")
    (aelig . "\u00e6")
    (ccedil . "\u00e7")
    (egrave . "\u00e8")
    (eacute . "\u00e9")
    (ecirc . "\u00ea")
    (euml . "\u00eb")
    (igrave . "\u00ec")
    (iacute . "\u00ed")
    (icirc . "\u00ee")
    (iuml . "\u00ef")
    (eth . "\u00f0")
    (ntilde . "\u00f1")
    (ograve . "\u00f2")
    (oacute . "\u00f3")
    (ocirc . "\u00f4")
    (otilde . "\u00f5")
    (ouml . "\u00f6")
    (divide . "\u00f7")
    (oslash . "\u00f8")
    (ugrave . "\u00f9")
    (uacute . "\u00fa")
    (ucirc . "\u00fb")
    (uuml . "\u00fc")
    (yacute . "\u00fd")
    (thorn . "\u00fe")
    (yuml . "\u00ff")
    (OElig . "\u0152")
    (oelig . "\u0153")
    (Scaron . "\u0160")
    (scaron . "\u0161")
    (Yuml . "\u0178")
    (circ . "\u02c6")
    (tilde . "\u02dc")
    (ensp . "\u2002")
    (emsp . "\u2003")
    (thinsp . "\u2009")
    (zwnj . "\u200c")
    (zwj . "\u200d")
    (lrm . "\u200e")
    (rlm . "\u200f")
    (ndash . "\u2013")
    (mdash . "\u2014")
    (lsquo . "\u2018")
    (rsquo . "\u2019")
    (sbquo . "\u201a")
    (ldquo . "\u201c")
    (rdquo . "\u201d")
    (bdquo . "\u201e")
    (dagger . "\u2020")
    (Dagger . "\u2021")
    (permil . "\u2030")
    (lsaquo . "\u2039")
    (rsaquo . "\u203a")
    (euro . "\u20ac")
    (fnof . "\u0192")
    (Alpha . "\u0391")
    (Beta . "\u0392")
    (Gamma . "\u0393")
    (Delta . "\u0394")
    (Epsilon . "\u0395")
    (Zeta . "\u0396")
    (Eta . "\u0397")
    (Theta . "\u0398")
    (Iota . "\u0399")
    (Kappa . "\u039a")
    (Lambda . "\u039b")
    (Mu . "\u039c")
    (Nu . "\u039d")
    (Xi . "\u039e")
    (Omicron . "\u039f")
    (Pi . "\u03a0")
    (Rho . "\u03a1")
    (Sigma . "\u03a3")
    (Tau . "\u03a4")
    (Upsilon . "\u03a5")
    (Phi . "\u03a6")
    (Chi . "\u03a7")
    (Psi . "\u03a8")
    (Omega . "\u03a9")
    (alpha . "\u03b1")
    (beta . "\u03b2")
    (gamma . "\u03b3")
    (delta . "\u03b4")
    (epsilon . "\u03b5")
    (zeta . "\u03b6")
    (eta . "\u03b7")
    (theta . "\u03b8")
    (iota . "\u03b9")
    (kappa . "\u03ba")
    (lambda . "\u03bb")
    (mu . "\u03bc")
    (nu . "\u03bd")
    (xi . "\u03be")
    (omicron . "\u03bf")
    (pi . "\u03c0")
    (rho . "\u03c1")
    (sigmaf . "\u03c2")
    (sigma . "\u03c3")
    (tau . "\u03c4")
    (upsilon . "\u03c5")
    (phi . "\u03c6")
    (chi . "\u03c7")
    (psi . "\u03c8")
    (omega . "\u03c9")
    (thetasym . "\u03d1")
    (upsih . "\u03d2")
    (piv . "\u03d6")
    (bull . "\u2022")
    (hellip . "\u2026")
    (prime . "\u2032")
    (Prime . "\u2033")
    (oline . "\u203e")
    (frasl . "\u2044")
    (weierp . "\u2118")
    (image . "\u2111")
    (real . "\u211c")
    (trade . "\u2122")
    (alefsym . "\u2135")
    (larr . "\u2190")
    (uarr . "\u2191")
    (rarr . "\u2192")
    (darr . "\u2193")
    (harr . "\u2194")
    (crarr . "\u21b5")
    (lArr . "\u21d0")
    (uArr . "\u21d1")
    (rArr . "\u21d2")
    (dArr . "\u21d3")
    (hArr . "\u21d4")
    (forall . "\u2200")
    (part . "\u2202")
    (exist . "\u2203")
    (empty . "\u2205")
    (nabla . "\u2207")
    (isin . "\u2208")
    (notin . "\u2209")
    (ni . "\u220b")
    (prod . "\u220f")
    (sum . "\u2211")
    (minus . "\u2212")
    (lowast . "\u2217")
    (radic . "\u221a")
    (prop . "\u221d")
    (infin . "\u221e")
    (ang . "\u2220")
    (and . "\u2227")
    (or . "\u2228")
    (cap . "\u2229")
    (cup . "\u222a")
    (int . "\u222b")
    (there4 . "\u2234")
    (sim . "\u223c")
    (cong . "\u2245")
    (asymp . "\u2248")
    (ne . "\u2260")
    (equiv . "\u2261")
    (le . "\u2264")
    (ge . "\u2265")
    (sub . "\u2282")
    (sup . "\u2283")
    (nsub . "\u2284")
    (sube . "\u2286")
    (supe . "\u2287")
    (oplus . "\u2295")
    (otimes . "\u2297")
    (perp . "\u22a5")
    (sdot . "\u22c5")
    (lceil . "\u2308")
    (rceil . "\u2309")
    (lfloor . "\u230a")
    (rfloor . "\u230b")
    (lang . "\u2329")
    (rang . "\u232a")
    (loz . "\u25ca")
    (spades . "\u2660")
    (clubs . "\u2663")
    (hearts . "\u2665")
    (diams . "\u2666")
    ))

(with-module sxml.ssax
  (set! ssax:predefined-parsed-entities
        `(,@(with-module user xhtml-entity)
          ,@ssax:predefined-parsed-entities)))

(define verbose  #f)
(define prefix   "/hoge/out")
(define debug    #f)

(define (remove-useless-elements! sxml)
  (for-each (lambda (obj)
              (sxml:change-name! obj 'useless)
              (sxml:change-content!  obj `())
              (sxml:change-attrlist! obj `()))
            (append
             ((sxpath '(// (or@ xhtml:script xhtml:iframe))) sxml)
             ((sxpath '(// (xhtml:link (@ type  (equal? "application/rss+xml"))))) sxml)
             (filter (lambda (obj)
                       (or (and-let* ((id (sxml:attr obj 'id))
                                      (id (sxml:string-value id)))
                             (or (equal? id "nav-access")
                                 (equal? id "sitetools")))
                           (and-let* ((class (sxml:attr obj 'class))
                                      (class (sxml:string-value class)))
                             (equal? class "page-anchors"))))
                     ((sxpath '(// xhtml:ul)) sxml))
             (filter (lambda (obj)
                       (or (and-let* ((id (sxml:attr obj 'id))
                                      (id (sxml:string-value id)))
                             (or (equal? id "deki-page-alerts")
                                 (equal? id "popupMessage")
                                 (equal? id "popupMask")
                                 (equal? id "popupContainer")
                                 (equal? id "page-tags")
                                 (equal? id "page-files")
                                 (equal? id "MTMessage")))
                           (and-let* ((class (sxml:attr obj 'class))
                                      (class (sxml:string-value class)))
                             (or (equal? class "siteNav")
                                 (equal? class "siteSearch")
                                 (equal? class "pageBar")
                                 (equal? class "suggestchannels")))
                           (and-let* ((style (sxml:attr obj 'style))
                                      (style (sxml:string-value style)))
                             (equal? style "background-color:red; color:white; text-align:center;"))))
                     ((sxpath '(// xhtml:div)) sxml))
               )))


(define (remove-elements-confuse-serializer! sxml)
  (for-each (lambda (obj)
              (sxml:change-attrlist! obj (map (lambda (x)
                                                (case (car x)
                                                  ((id href title)
                                                   (list (car x) (regexp-replace-all* (sxml:string-value x)
                                                                                      #/</
                                                                                      "&lt;")))
                                                  (else x)))
                                              (sxml:attr-list obj))))
            ((sxpath '(// (* (@ (or@ id href title))))) sxml))
  (for-each (lambda (obj)
              (sxml:change-attrlist! obj (remove (lambda (x)
                                                   (case (car x)
                                                     ((nowrap border) #t)
                                                     (else #f)))
                                                 (sxml:attr-list obj))))
            ((sxpath '(// (or@ xhtml:td xhtml:table (@ (or@ border nowrap))))) sxml))
  (for-each (lambda (obj)
              (sxml:change-attrlist! obj (remove (lambda (x)
                                                   (eq? (car x) 'controls))
                                                 (sxml:attr-list obj))))
            ((sxpath '(// xhtml:video)) sxml))
  (for-each (lambda (obj)
              (sxml:change-attrlist! obj (remove (lambda (x)
                                                   (eq? (car x) 'id))
                                                 (sxml:attr-list obj))))
            ((sxpath '(// (xhtml:span (@ id (equal? "id"))))) sxml)))

(define (expand-div! sxml)
  (for-each (lambda (obj)
              (when (and (string=? "" (sxml:string-value obj))
                         (zero? (length (sxml:child-elements obj))))
                (sxml:change-content! obj '(""))))
            ((sxpath '(// xhtml:div)) sxml)))

(define resolve-uri-cache (make-hash-table 'string=?))

(define (resolve-uri base uri)
  (define key (string-append base uri))
  (define (cache result)
    (hash-table-put! offline-uri-cache key result)
    result)

  ;;Test1   "window.html"
  ;;Expect1 "https://developer.mozilla.org/en/DOM/window"
  ;;Test2   "https://developer.mozilla.org/en/About"
  ;;Expect2 "https://developer.mozilla.org/en/About"

  (if (hash-table-exists? resolve-uri-cache key)
    (hash-table-get resolve-uri-cache key)
    (cache
     (receive (scheme _ host _ path query fragment) (uri-parse uri)
       (and path
            (uri-compose
             :scheme   (or scheme "https")
             :host     (or host "developer.mozilla.org")
             :path     (if (relative-path? path)
                         (let* ((r (simplify-path (build-path base path)))
                                (ext (path-extension r)))
                           (if (string=? ext "html")
                             (path-sans-extension r)
                             r))
                         path)
             :query    query
             :fragment fragment))))))

(define (path-filter path)
  ;;downcase and replace characters which confuse the texinfo system.
  ;;A period can confuse the Texinfo but we are going to work it at replace-period-except-html-extension
  (define (replace str)
    (regexp-replace-all #/@|,|:|\'|\"|%3a/ str "_"))

  (replace (string-downcase path)))

(define offline-uri-cache (make-hash-table 'string=?))

(define (offline-uri uri)
  (define (cache result)
    (hash-table-put! offline-uri-cache uri result)
    result)
  ;;Test   "http://developer.mozilla.org/en/DOM/window.returnValue"
  ;;Expect "file:///home/teruaki/mdctexinfo/out/developer.mozilla.org/en/dom/window.returnvalue.html"
  ;;Test   "http://developer.mozilla.org/en/DOM/About"
  ;;Expect "file:///home/teruaki/mdctexinfo/out/developer.mozilla.org/en/dom/about.html"
  ;;Test   "http://developer.mozilla.org/en/HTML"
  ;;Expect "file:///home/teruaki/mdctexinfo/out/developer.mozilla.org/en/html.html"
  ;;Test   "file:///home/teruaki/mdctexinfo/out/developer.mozilla.org/en/DOM/Window.html"
  ;;Expect "file:///home/teruaki/mdctexinfo/out/developer.mozilla.org/en/dom/window.html"
  ;;Test   "http://developer.mozilla.org/"
  ;;Expect "file:///home/teruaki/mdctexinfo/out/developer.mozilla.org/"
  ;;Test   "http://developer.mozilla.org/skins/common/css.php"
  ;;Expect "file:///home/teruaki/mdctexinfo/out/developer.mozilla.org/skins/common/css.php"
  (if (hash-table-exists? offline-uri-cache uri)
    (hash-table-get offline-uri-cache uri)
    (cache
     (receive (scheme _ host _ path query fragment) (uri-parse uri)
       (if (and scheme host path)
         (if (and (string=? scheme "https")
                  (string=? host   "developer.mozilla.org"))
           (uri-compose
            :scheme   "file"
            :host     (build-path prefix "developer.mozilla.org")
            :path     (rxmatch-cond
                        ((#/^\/skins|deki\// path)
                         (#f)
                         path)
                        ((#/^\/$/ path)
                         (#f)
                         path)
                        (else
                         (string-append (path-filter path) ".html")))
            :query    query
            :fragment fragment)
           (uri-compose
            :scheme   scheme
            :host     host
            :path     (rxmatch-cond
                        ((#/(.*\/)developer\.mozilla\.org(\/.*)/ path)
                         (#f before after)
                         (string-append before "developer.mozilla.org" (path-filter after)))
                        (else
                         (path-filter path)))
            :query    query
            :fragment fragment))
         #f)))))


(define replace-period-except-html-extension-cache (make-hash-table 'string=?))

(define (replace-period-except-html-extension uri)
  (define (cache result)
    (hash-table-put! replace-period-except-html-extension-cache uri result)
    result)

  (if (hash-table-exists? replace-period-except-html-extension-cache uri)
    (hash-table-get replace-period-except-html-extension-cache uri)
    (cache (rxmatch-cond
             ((#/(.*\/)developer\.mozilla\.org(\/.*)\.html$/ uri)
              (#f before after)
              (string-append before "developer.mozilla.org" (regexp-replace-all #/\./ after "_") ".html"))
             ((#/(.*)\.html$/ uri)
              (#f after)
              (string-append (regexp-replace-all #/\./ after "_") ".html"))
             (else
               uri)))))

(define (process-links! base sxml)
  (for-each (lambda (obj)
              (and-let* ((uria (resolve-uri base (sxml:string-value obj)))
                         (urib (offline-uri uria))
                         (uri  (replace-period-except-html-extension urib)))
                (sxml:change-content! obj `(,uri))))
            ((sxpath '(// @ href)) sxml)))

(define (MDC-xhtml->sxml path)
  (and-let* ((source (file->string path))
             (cleaned (regexp-replace-all*
                       source
                       #/\"return false\;\"\"/
                       "\"return false;\""
                       #/onclick=\"[^\"]+\"/
                       ""
                       #/&&/
                       "&amp;&amp;"
                       )))
    (call-with-input-string cleaned
      (lambda (in)
        (ssax:xml->sxml in '((xhtml . "http://www.w3.org/1999/xhtml")))))))

(define (process! path)
  (define (solve path)
    (rxmatch-cond 
      ((#/developer\.mozilla\.org\/(.*)\/(.*)$/ path)
       (#f base after)
       (values base
               (build-path prefix "developer.mozilla.org" (regexp-replace-all #/\./ (path-filter base) "_")
                           (replace-period-except-html-extension (path-filter after)))))
      ((#/developer\.mozilla\.org\/(.*)$/ path)
       (#f after)
       (values "/"
               (build-path prefix "developer.mozilla.org"
                           (replace-period-except-html-extension (path-filter after)))))
      (else
       (error "oops." path))))

  (receive (base save-path) (solve path)
    (unless (and debug (file-exists? save-path))
      (when verbose (print save-path))
      (let1 sxml (MDC-xhtml->sxml path)
        (remove-useless-elements! sxml)
        (remove-elements-confuse-serializer! sxml)
        (process-links! base sxml)
        (expand-div! sxml)
        (create-directory* (sys-dirname save-path))
        (call-with-output-file save-path
          (lambda (out)
            (call-with-input-string (format-sxml-to-string sxml)
              (lambda (in)
                (copy-port in out))))
          :encoding 'utf-8)))))

(define (main args)
  (let-args (cdr args)
      ((v      "v|verbose")
       (p      "p|prefix=s" (build-path (current-directory) "out"))
       (d      "d|debug")
       (help   "h|help" => (cut show-help (car args)))
       . restargs)
    (set! verbose v)
    (set! prefix  p)
    (set! debug   d)
    (for-each process! (filter file-is-regular? restargs)))
  0)

(define (show-help prog-name)
  (format #t "usage: gosh main.scm [OPTIONS]... \n")
  (format #t " -v, --verbose     verbose.\n")
  (format #t " -p, --prefix=s    save to.\n")
  (format #t " -h, --help        print this documentation.\n")
  #t)
