@node common
@chapter common

@menu
* load-xml::                    
* format-sxml-to-string::       
* replace-all-period-to-underscore::  
* path-filter::                 
* <place>::                     
* make-place-from-uri-http::    
* make-place-from-uri-file::    
* make-place-from-uri-resolve::  
* make-place-from-file-path::   
* uri-http::                    
* uri-file::                    
* file-path::                   
@end menu

@node load-xml, format-sxml-to-string, common, common
@section load-xml
XMLファイルを読み込み、SXMLを返す。
@lisp
(define (load-xml path)
  (call-with-input-file path
    (cut ssax:xml->sxml <> '((xhtml . "http://www.w3.org/1999/xhtml")))
    :encoding 'utf-8))
@end lisp

@section getElementById
DOMの同名の関数と同じ。
@lisp
(define (getElementById id sxml)
  ((if-car-sxpath `(// (* (@ id (equal? ,id))))) sxml))
@end lisp

@node format-sxml-to-string, replace-all-period-to-underscore, load-xml, common
@section format-sxml-to-string
SXMLを@code{srl:sxml->html}で文字列として出力した後で、以下の処理を行う。
@itemize @bullet
@item <useless/>文字列を消す @footnote{useless要素を削除するようなpre-post-orderでもよいだろう。実験した。速度が同等だった。}
@item @uref{load-xml}で付与したXML名前空間接頭辞のxhtml:を取り除く
@end itemize

@lisp
(define (format-sxml-to-string sxml)
  (regexp-replace-all*
   (call-with-output-string (cut srl:sxml->html sxml <>))
   #/<useless\/>/
   ""
   #/<xhtml:/
   "<"
   #/<\/xhtml:/
   "</"
   #/xmlns:xhtml/
   "xmlns"
   ))
@end lisp

@node replace-all-period-to-underscore, path-filter, format-sxml-to-string, common
@section replace-all-period-to-underscore

ピリオドをすべてアンダースコアに変換する。
texinfoがノード名にピリオドを含むのを嫌うため必要。
一般的に、ピリオドは、拡張子や、小数点にも使われ、意味が曖昧なので注意。
例えば以下のときである。

@example
<a href="firefox3.html"/>
<a href="firefox3.png"/>
<a href="firefox3.5"/>
@end example

@lisp
(define (replace-all-period-to-underscore str)
  (regexp-replace-all #/\./ str "_"))
@end lisp

@section memoize

関数をメモ化した関数を返す。

@lisp
(define (memoize fn)
  (let1 ht (make-hash-table 'equal?)
    (lambda args
      (if (hash-table-exists? ht args)
        (hash-table-get ht args)
        (rlet1 result (apply fn args)
               (hash-table-put! ht args result))))))
@end lisp

@node path-filter, <place>, replace-all-period-to-underscore, common
@section path-filter

URIには、以下の特徴がある。

@itemize @bullet
@item 大文字小文字の区別がない
@end itemize

MDCの MindTouch Wiki のリンクには、以下の特徴がある。

@itemize @bullet
@item 大文字小文字の区別がない
@item アットマーク、カンマ、コロン、クォート、ダブルクォートを含める
@item /ja/About:hoge は実は /ja/About/hoge である。
@item / は実は /en である。
@end itemize

Unix のファイルシステムには以下の特徴がある。
@itemize @bullet
@item 大文字小文字の区別がある
@item ファイル名にクォート、ダブルクォートがあると、 @command{xargs}コマンドが混乱する。
@item ピリオドが、拡張子や小数点などに曖昧に使われる。
@end itemize

Texinfo のノード名には以下の特徴がある。
@itemize @bullet
@item 大文字小文字の区別がある
@item アットマーク、カンマ、コロンはエスケープが必要で面倒
@item ピリオドを含むと info のバージョンによってはおかしくなる
@end itemize

そこで @ref{path-filter} は、全てを満足するため、以下の処理を行う。 

@itemize @bullet
@item すべて小文字にする
@item アットマーク、カンマ、コロン、クォート、ダブルクォートをアンダースコアに置換する。
@item ピリオドは拡張子として重要なので、放っておく。
@end itemize

性能のためメモ化した。

@lisp
(define (***path-filter path)
  (define (replace str)
    (regexp-replace-all #/@|,|:|\'|\"|%3a/ str "_"))

  (replace (string-downcase path)))

(define path-filter (memoize ***path-filter))
@end lisp

@node <place>, make-place-from-uri-http, path-filter, common
@section <place>

概念的には、以下は"場所"として同一視できる。また、相互に変換できる。

@itemize @bullet
@item URI (https://developer.mozilla.org/ja/About#section.1?q=foo)
@item URI(ローカル) (file:///home/teruaki/mdctexinfo/developer.mozilla.org/ja/About.html#section.1?q=foo)
@item Texinfoノード (ja/about)
@item ファイルパス (/home/teruaki/mdctexinfo/developer.mozilla.org/ja/about.html)
@end itemize

<place>クラスは、"場所"を表現する。

@lisp
(define-class <place> ()
  ((path     :init-keyword :path     :init-value #f)
   (query    :init-keyword :query    :init-value #f)
   (fragment :init-keyword :fragment :init-value #f)))
@end lisp

@node make-place-from-uri-http, make-place-from-uri-file, <place>, common
@section make-place-from-uri-http

URI(http://...)から <place> のインスタンスを作る。
以下のように、入力を想定し、出力を期待している。

@multitable @columnfractions .5 .5
@item 入力 @tab 出力
@item https://developer.mozilla.org/ja/About @tab /ja/About.html
@item https://developer.mozilla.org/ja/About#section.1?q=foo&a=bar @tab /ja/About.html section.1 q=foo&a=bar
@item https://developer.mozilla.org/ @tab /en.html
@item https://developer.mozilla.org/skins/.../fox3.css @tab /skins/.../fox3.css
@item https://developer.mozilla.org/deki/.../image.png @tab /deki/.../image.png
@end multitable

性能のためメモ化している。

@lisp
(define (***make-place-from-uri-http uri)
  (receive (_ _ _ _ path query fragment) (uri-parse uri)
    (let* ((path (if (string=? path "/")
                   "/en"
                   path))
           (path (rxmatch-if (#/^\/skins|deki\// path)
                     (#f)
                     path
                     (string-append path ".html"))))
      (make <place> :path path :query query :fragment fragment))))

(define make-place-from-uri-http (memoize ***make-place-from-uri-http))
@end lisp

@node make-place-from-uri-file, make-place-from-uri-resolve, make-place-from-uri-http, common
@section make-place-from-uri-file

URI(file://...)から <place> のインスタンスを作る。

file://のリンクを張ったのは、 @command{wget} の --convert-links である。
@footnote{今思えば、@command{wget} に --convert-links をつけないほうがよかったかも}

以下のように、入力を想定し、出力を期待している。

@multitable @columnfractions .5 .5
@item 入力 @tab 出力
@item file:///home/teruaki/mdctexinfo/developer.mozilla.org/ja/About.html @tab /ja/About.html
@item file:///home/teruaki/mdctexinfo/developer.mozilla.org/ja/About#section.1?q=foo&a=bar @tab /ja/About.html section.1 q=foo&a=bar
@item FIXME FIXME file:///home/teruaki/mdctexinfo/developer.mozilla.org/ @tab /en.html
@item file:///home/teruaki/mdctexinfo/developer.mozilla.org/skins/.../fox3.css @tab /skins/.../fox3.css
@item file:///home/teruaki/mdctexinfo/developer.mozilla.org/deki/.../image.png @tab /deki/.../image.png
@end multitable

性能のためメモ化している。

@lisp
(define (***make-place-from-uri-file uri)
  (receive (_ _ _ _ path query fragment) (uri-parse uri)
    (and path
         (rxmatch-if (#/\/developer\.mozilla\.org(\/.*)/ path)
             (#f path)
             (make <place> :path path :query query :fragment fragment)
             #f))))

(define make-place-from-uri-file (memoize ***make-place-from-uri-file))
@end lisp

@node make-place-from-uri-resolve, make-place-from-file-path, make-place-from-uri-file, common
@section make-place-from-uri-resolve

URIの相対リンクから <place> のインスタンスを作る。
相対リンクを絶対リンクに変換する。

例えば /home/teruaki/mdctexinfo/developer.mozilla.org/ja/About/hoge.html ファイルを処理しているときに、base は /ja/About である。

以下のように、入力を想定し、出力を期待している。

@multitable @columnfractions .5 .5
@item 入力 @tab 出力
@item ../About.html @tab /ja/About.html
@item ../About.html#section.1?q=foo&a=bar @tab /ja/About.html section.1 q=foo&a=bar
@end multitable

性能のためメモ化している。

@lisp
(define (***make-place-from-uri-resolve base uri)
  (receive (_ _ _ _ path query fragment) (uri-parse uri)
    (and path
         (let1 path (if (relative-path? path)
                      (simplify-path (build-path base path))
                      path)
           (make <place> :path path :query query :fragment fragment)))))

(define make-place-from-uri-resolve (memoize ***make-place-from-uri-resolve))
@end lisp

@node  make-place-from-file-path, uri-http, make-place-from-uri-resolve, common
@section make-place-from-file-path

ファイルパスから <place> のインスタンスを作る。
以下のように、入力を想定し、出力を期待している。

@multitable @columnfractions .5 .5
@item 入力 @tab 出力
@item /home/teruaki/mdctexinfo/developer.mozilla.org/ja/About.html @tab /ja/About.html
@end multitable

性能のためメモ化している。

@lisp
(define (***make-place-from-file-path path)
  (rxmatch-if (#/developer\.mozilla\.org(\/.*)/ path)
      (#f path)
      (make <place> :path path)
      #f))

(define make-place-from-file-path (memoize ***make-place-from-file-path))
@end lisp

@node  uri-http, uri-file, make-place-from-file-path, common
@section uri-http

<place>からURI(https://...)を出力する。

@lisp
(define-method uri-http ((p <place>))
  (uri-compose :scheme   "https"
               :host     "developer.mozilla.org"
               :path     (slot-ref p 'path)
               :query    (slot-ref p 'query)
               :fragment (slot-ref p 'fragment)))
@end lisp

@node uri-file, file-path, uri-http, common
@section uri-file

<place>からURI(file://...)を出力する。
FIXME FIXME path-filter で処理している。
カレントディレクトリの情報と組み合わせて、
例えば、 /ja/About から file:///home/teruaki/mdctexinfo/out/developer.mozilla.org/ja/about.html を出力する。

@lisp
(define-method uri-file ((p <place>))
  (uri-compose :scheme   "file"
               :path     (path-filter
                          (string-append (current-directory)
                                         "/out/developer.mozilla.org"
                                         (slot-ref p 'path)))
               :query    (slot-ref p 'query)
               :fragment (slot-ref p 'fragment)))
@end lisp

@node file-path,  , uri-file, common
@section file-path

<place>からファイルパスを出力する。
FIXME FIXME path-filter で処理している。
例えば、 /ja/About から out/developer.mozilla.org/ja/about.html を出力する。

@lisp
(define-method file-path ((p <place>))
  (string-append "out/developer.mozilla.org"
                 (path-filter (slot-ref p 'path))))
@end lisp

@section texi-node
<place>から Texinfo ノード名 を出力する。
FIXME FIXME path-filter で処理している。
FIXME FIXME 例えば、 /ja/Firefox3.5.html から ja/firefox3_5 を出力する。

@lisp
(define-method texi-node ((p <place>))
  (rxmatch-if (#/^\/(.*)\.html$/ (slot-ref p 'path))
      (#f x)
      (replace-all-period-to-underscore x)
      (begin
        (when debug
          (call-with-output-file "./huga" (lambda (out)
                                            (display (slot-ref p 'path) out)
                                            (newline out))
                                 :if-exists :append))
        #f)))
@end lisp
