(use srfi-1)
(use srfi-43)
(use file.util)
(use util.combinations)
(use util.list)
(use gauche.parseopt)

(define (test str)
  (let*  ((tmp (string-split str "_"))
          (v (list->vector (remove (cut string=? "" <>) tmp)))
          (w (make-vector (- (* (vector-length v) 2) 1) "_")))
    (vector-for-each (lambda (i x)
                       (vector-set! w (* i 2) x))
                     v)
    (find (lambda (path)
            (file-exists? (build-path "texi/developer.mozilla.org/" (string-append path ".texi"))))
          (map (lambda (l)
                 (for-each (lambda (x)
                             (vector-set! w (+ (* x 2) 1) "/"))
                           l)
                 (rlet1 r (string-join (vector->list w) "")
                   (for-each (lambda (x)
                               (vector-set! w (+ (* x 2) 1) "_"))
                             l)))
               (cdr (power-set (iota (- (vector-length v) 1))))))))

(define (main args)
  (let-args (cdr args)
      ((v      "v|verbose")
       . restargs)
    (let* ((notfound_scm (car restargs))
           (notfound-table (alist->hash-table (car (file->sexp-list notfound_scm))
                                              'string=?)))
      (hash-table-for-each notfound-table
                           (lambda (key value)
                             (unless value
                               (rxmatch-cond
                                 ((#/^en(\/.*)/ key)
                                  (#f after)
                                  (if-let1 recover-ja (test (string-append "ja" after))
                                           (hash-table-put! notfound-table key recover-ja)
                                           (if-let1 recover (test key)
                                                    (hash-table-put! notfound-table key recover))))
                                 ((#/^ja(\/.*)/ key)
                                  (#f after)
                                  (if-let1 recover (test key)
                                           (hash-table-put! notfound-table key recover)
                                           (if-let1 recover-en (test (string-append "en" after))
                                                    (hash-table-put! notfound-table key recover-en))))))))
      (print "(")
      (for-each (lambda (x)
                  (display " ")
                  (write x)
                  (newline))
                (stable-sort (hash-table->alist notfound-table)
                             (lambda (a b)
                               (cond
                                ((and (cdr a) (cdr b))
                                 (string<? (car a) (car b)))
                                ((and (not (cdr a)) (not (cdr b)))
                                 (string<? (car a) (car b)))
                                ((cdr a)
                                 #t)
                                ((cdr b)
                                 #f)
                                (else #t)))))
      (print ")")))
  0)

